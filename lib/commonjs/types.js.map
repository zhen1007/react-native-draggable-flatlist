{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  FlatListProps,\r\n  LayoutChangeEvent,\r\n  StyleProp,\r\n  ViewStyle,\r\n} from \"react-native\";\r\nimport { useAnimatedValues } from \"./context/animatedValueContext\";\r\nimport { FlatList } from \"react-native-gesture-handler\";\r\nimport Animated, {\r\n  AnimateProps,\r\n  WithSpringConfig,\r\n} from \"react-native-reanimated\";\r\nimport { DEFAULT_PROPS } from \"./constants\";\r\n\r\nexport type DragEndParams<T> = {\r\n  data: T[];\r\n  from: number;\r\n  to: number;\r\n};\r\ntype Modify<T, R> = Omit<T, keyof R> & R;\r\n\r\ntype DefaultProps = Readonly<typeof DEFAULT_PROPS>;\r\n\r\nexport type DraggableFlatListProps<T> = Modify<\r\n  FlatListProps<T>,\r\n  {\r\n    data: T[];\r\n    activationDistance?: number;\r\n    animationConfig?: Partial<WithSpringConfig>;\r\n    autoscrollSpeed?: number;\r\n    autoscrollThreshold?: number;\r\n    containerStyle?: StyleProp<ViewStyle>;\r\n    debug?: boolean;\r\n    dragItemOverflow?: boolean;\r\n    keyExtractor: (item: T, index: number) => string;\r\n    onDragBegin?: (index: number) => void;\r\n    onDragEnd?: (params: DragEndParams<T>) => void;\r\n    onPlaceholderIndexChange?: (placeholderIndex: number) => void;\r\n    onRelease?: (index: number) => void;\r\n    onScrollOffsetChange?: (scrollOffset: number) => void;\r\n    renderItem: RenderItem<T>;\r\n    renderPlaceholder?: RenderPlaceholder<T>;\r\n    simultaneousHandlers?: React.Ref<any> | React.Ref<any>[];\r\n    outerScrollOffset?: Animated.SharedValue<number>;\r\n    onAnimValInit?: (animVals: ReturnType<typeof useAnimatedValues>) => void;\r\n    itemEnteringAnimation?: AnimateProps<Animated.View>[\"entering\"];\r\n    itemExitingAnimation?: AnimateProps<Animated.View>[\"exiting\"];\r\n    itemLayoutAnimation?: AnimateProps<Animated.View>[\"layout\"];\r\n    enableLayoutAnimationExperimental?: boolean;\r\n    onContainerLayout?: (params: {\r\n      layout: LayoutChangeEvent[\"nativeEvent\"][\"layout\"];\r\n      containerRef: React.RefObject<Animated.View>;\r\n    }) => void;\r\n  } & Partial<DefaultProps>\r\n>;\r\n\r\nexport type RenderPlaceholder<T> = (params: {\r\n  item: T;\r\n  index: number;\r\n}) => JSX.Element;\r\n\r\nexport type RenderItemParams<T> = {\r\n  item: T;\r\n  getIndex: () => number | undefined; // This is technically a \"last known index\" since cells don't necessarily rerender when their index changes\r\n  drag: () => void;\r\n  isActive: boolean;\r\n};\r\n\r\nexport type RenderItem<T> = (params: RenderItemParams<T>) => React.ReactNode;\r\n\r\nexport type AnimatedFlatListType = <T>(\r\n  props: Animated.AnimateProps<\r\n    FlatListProps<T> & {\r\n      ref: React.Ref<FlatList<T>>;\r\n      simultaneousHandlers?: React.Ref<any> | React.Ref<any>[];\r\n    }\r\n  >\r\n) => React.ReactElement;\r\n\r\nexport type CellData = {\r\n  measurements: {\r\n    size: number;\r\n    offset: number;\r\n  };\r\n};\r\n"],"mappings":""}