{"version":3,"names":["React","useRef","useDraggableFlatListContext","useRefs","useStableCallback","typedMemo","RowItem","props","propsRef","current","activeKey","activeKeyRef","keyToIndexRef","drag","itemKey","debug","console","log","renderItem","item","extraData","getIndex","get","Inner","rest","MemoizedInner"],"sources":["RowItem.tsx"],"sourcesContent":["import React, { useRef } from \"react\";\r\nimport { useDraggableFlatListContext } from \"../context/draggableFlatListContext\";\r\nimport { useRefs } from \"../context/refContext\";\r\nimport { useStableCallback } from \"../hooks/useStableCallback\";\r\nimport { RenderItem } from \"../types\";\r\nimport { typedMemo } from \"../utils\";\r\n\r\ntype Props<T> = {\r\n  extraData?: any;\r\n  drag: (itemKey: string) => void;\r\n  item: T;\r\n  renderItem: RenderItem<T>;\r\n  itemKey: string;\r\n  debug?: boolean;\r\n};\r\n\r\nfunction RowItem<T>(props: Props<T>) {\r\n  const propsRef = useRef(props);\r\n  propsRef.current = props;\r\n\r\n  const { activeKey } = useDraggableFlatListContext();\r\n  const activeKeyRef = useRef(activeKey);\r\n  activeKeyRef.current = activeKey;\r\n  const { keyToIndexRef } = useRefs();\r\n\r\n  const drag = useStableCallback(() => {\r\n    const { drag, itemKey, debug } = propsRef.current;\r\n    if (activeKeyRef.current) {\r\n      // already dragging an item, noop\r\n      if (debug)\r\n        console.log(\r\n          \"## attempt to drag item while another item is already active, noop\"\r\n        );\r\n    }\r\n    drag(itemKey);\r\n  });\r\n\r\n  const { renderItem, item, itemKey, extraData } = props;\r\n\r\n  const getIndex = useStableCallback(() => {\r\n    return keyToIndexRef.current.get(itemKey);\r\n  });\r\n\r\n  return (\r\n    <MemoizedInner\r\n      isActive={activeKey === itemKey}\r\n      drag={drag}\r\n      renderItem={renderItem}\r\n      item={item}\r\n      getIndex={getIndex}\r\n      extraData={extraData}\r\n    />\r\n  );\r\n}\r\n\r\nexport default typedMemo(RowItem);\r\n\r\ntype InnerProps<T> = {\r\n  isActive: boolean;\r\n  item: T;\r\n  getIndex: () => number | undefined;\r\n  drag: () => void;\r\n  renderItem: RenderItem<T>;\r\n  extraData?: any;\r\n};\r\n\r\nfunction Inner<T>({ renderItem, extraData, ...rest }: InnerProps<T>) {\r\n  return renderItem({ ...rest }) as JSX.Element;\r\n}\r\n\r\nconst MemoizedInner = typedMemo(Inner);\r\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,2BAAT,QAA4C,qCAA5C;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AAEA,SAASC,SAAT,QAA0B,UAA1B;;AAWA,SAASC,OAAT,CAAoBC,KAApB,EAAqC;EACnC,MAAMC,QAAQ,GAAGP,MAAM,CAACM,KAAD,CAAvB;EACAC,QAAQ,CAACC,OAAT,GAAmBF,KAAnB;EAEA,MAAM;IAAEG;EAAF,IAAgBR,2BAA2B,EAAjD;EACA,MAAMS,YAAY,GAAGV,MAAM,CAACS,SAAD,CAA3B;EACAC,YAAY,CAACF,OAAb,GAAuBC,SAAvB;EACA,MAAM;IAAEE;EAAF,IAAoBT,OAAO,EAAjC;EAEA,MAAMU,IAAI,GAAGT,iBAAiB,CAAC,MAAM;IACnC,MAAM;MAAES,IAAF;MAAQC,OAAR;MAAiBC;IAAjB,IAA2BP,QAAQ,CAACC,OAA1C;;IACA,IAAIE,YAAY,CAACF,OAAjB,EAA0B;MACxB;MACA,IAAIM,KAAJ,EACEC,OAAO,CAACC,GAAR,CACE,oEADF;IAGH;;IACDJ,IAAI,CAACC,OAAD,CAAJ;EACD,CAV6B,CAA9B;EAYA,MAAM;IAAEI,UAAF;IAAcC,IAAd;IAAoBL,OAApB;IAA6BM;EAA7B,IAA2Cb,KAAjD;EAEA,MAAMc,QAAQ,GAAGjB,iBAAiB,CAAC,MAAM;IACvC,OAAOQ,aAAa,CAACH,OAAd,CAAsBa,GAAtB,CAA0BR,OAA1B,CAAP;EACD,CAFiC,CAAlC;EAIA,oBACE,oBAAC,aAAD;IACE,QAAQ,EAAEJ,SAAS,KAAKI,OAD1B;IAEE,IAAI,EAAED,IAFR;IAGE,UAAU,EAAEK,UAHd;IAIE,IAAI,EAAEC,IAJR;IAKE,QAAQ,EAAEE,QALZ;IAME,SAAS,EAAED;EANb,EADF;AAUD;;AAED,eAAef,SAAS,CAACC,OAAD,CAAxB;;AAWA,SAASiB,KAAT,OAAqE;EAAA,IAAnD;IAAEL,UAAF;IAAcE,SAAd;IAAyB,GAAGI;EAA5B,CAAmD;EACnE,OAAON,UAAU,CAAC,EAAE,GAAGM;EAAL,CAAD,CAAjB;AACD;;AAED,MAAMC,aAAa,GAAGpB,SAAS,CAACkB,KAAD,CAA/B"}