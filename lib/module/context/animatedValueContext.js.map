{"version":3,"names":["React","useMemo","useEffect","useCallback","useContext","useAnimatedReaction","useDerivedValue","useSharedValue","State","GestureState","useProps","AnimatedValueContext","createContext","undefined","AnimatedValueProvider","children","value","useSetupAnimatedValues","useAnimatedValues","Error","props","DEFAULT_VAL","containerSize","scrollViewSize","panGestureState","UNDETERMINED","touchTranslate","isTouchActiveNative","hasMoved","disabled","horizontalAnim","horizontal","activeIndexAnim","spacerIndexAnim","activeCellSize","activeCellOffset","scrollOffset","scrollInit","viewableIndexMin","viewableIndexMax","outerScrollOffset","outerScrollInit","cur","prev","placeholderOffset","isDraggingCell","autoScrollDistance","innerScrollDiff","outerScrollDiff","scrollDiff","touchPositionDiff","extraTranslate","touchPositionDiffConstrained","containerMinusActiveCell","offsetRelativeToScrollTop","constrained","Math","min","max","maxTranslateNegative","maxTranslatePositive","constrainedBase","dragItemOverflow","hoverAnim","hoverOffset","isHovering","resetTouchedCell","onAnimValInit"],"sources":["animatedValueContext.tsx"],"sourcesContent":["import React, { useMemo, useEffect, useCallback, useContext } from \"react\";\r\nimport {\r\n  useAnimatedReaction,\r\n  useDerivedValue,\r\n  useSharedValue,\r\n} from \"react-native-reanimated\";\r\nimport { State as GestureState } from \"react-native-gesture-handler\";\r\nimport { useProps } from \"./propsContext\";\r\n\r\nconst AnimatedValueContext = React.createContext<\r\n  ReturnType<typeof useSetupAnimatedValues> | undefined\r\n>(undefined);\r\n\r\nexport default function AnimatedValueProvider({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  const value = useSetupAnimatedValues();\r\n  return (\r\n    <AnimatedValueContext.Provider value={value}>\r\n      {children}\r\n    </AnimatedValueContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAnimatedValues() {\r\n  const value = useContext(AnimatedValueContext);\r\n  if (!value) {\r\n    throw new Error(\r\n      \"useAnimatedValues must be called from within AnimatedValueProvider!\"\r\n    );\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction useSetupAnimatedValues<T>() {\r\n  const props = useProps<T>();\r\n\r\n  const DEFAULT_VAL = useSharedValue(0);\r\n\r\n  const containerSize = useSharedValue(0);\r\n  const scrollViewSize = useSharedValue(0);\r\n\r\n  const panGestureState = useSharedValue<GestureState>(\r\n    GestureState.UNDETERMINED\r\n  );\r\n  const touchTranslate = useSharedValue(0);\r\n\r\n  const isTouchActiveNative = useSharedValue(false);\r\n\r\n  const hasMoved = useSharedValue(0);\r\n  const disabled = useSharedValue(false);\r\n\r\n  const horizontalAnim = useSharedValue(!!props.horizontal);\r\n\r\n  const activeIndexAnim = useSharedValue(-1); // Index of hovering cell\r\n  const spacerIndexAnim = useSharedValue(-1); // Index of hovered-over cell\r\n\r\n  const activeCellSize = useSharedValue(0); // Height or width of acctive cell\r\n  const activeCellOffset = useSharedValue(0); // Distance between active cell and edge of container\r\n\r\n  const scrollOffset = useSharedValue(0);\r\n  const scrollInit = useSharedValue(0);\r\n\r\n  const viewableIndexMin = useSharedValue(0);\r\n  const viewableIndexMax = useSharedValue(0);\r\n\r\n  // If list is nested there may be an outer scrollview\r\n  const outerScrollOffset = props.outerScrollOffset || DEFAULT_VAL;\r\n  const outerScrollInit = useSharedValue(0);\r\n\r\n  useAnimatedReaction(\r\n    () => {\r\n      return activeIndexAnim.value;\r\n    },\r\n    (cur, prev) => {\r\n      if (cur !== prev && cur >= 0) {\r\n        scrollInit.value = scrollOffset.value;\r\n        outerScrollInit.value = outerScrollOffset.value;\r\n      }\r\n    },\r\n    [outerScrollOffset]\r\n  );\r\n\r\n  const placeholderOffset = useSharedValue(0);\r\n\r\n  const isDraggingCell = useDerivedValue(() => {\r\n    return isTouchActiveNative.value && activeIndexAnim.value >= 0;\r\n  }, []);\r\n\r\n  useAnimatedReaction(\r\n    () => {\r\n      return outerScrollOffset.value;\r\n    },\r\n    (cur, prev) => {\r\n      if (isDraggingCell.value) {\r\n        return;\r\n      }\r\n      outerScrollInit.value = cur;\r\n    },\r\n    [outerScrollInit, isDraggingCell]\r\n  );\r\n\r\n  const autoScrollDistance = useDerivedValue(() => {\r\n    if (!isDraggingCell.value) return 0;\r\n    const innerScrollDiff = scrollOffset.value - scrollInit.value;\r\n    // If list is nested there may be an outer scroll diff\r\n    const outerScrollDiff = outerScrollOffset.value - outerScrollInit.value;\r\n    const scrollDiff = innerScrollDiff + outerScrollDiff;\r\n    return scrollDiff;\r\n  }, []);\r\n\r\n  const touchPositionDiff = useDerivedValue(() => {\r\n    const extraTranslate = isTouchActiveNative.value\r\n      ? autoScrollDistance.value\r\n      : 0;\r\n    return touchTranslate.value + extraTranslate;\r\n  }, []);\r\n\r\n  const touchPositionDiffConstrained = useDerivedValue(() => {\r\n    const containerMinusActiveCell =\r\n      containerSize.value - activeCellSize.value + scrollOffset.value;\r\n\r\n    const offsetRelativeToScrollTop =\r\n      touchPositionDiff.value + activeCellOffset.value;\r\n    const constrained = Math.min(\r\n      containerMinusActiveCell,\r\n      Math.max(scrollOffset.value, offsetRelativeToScrollTop)\r\n    );\r\n\r\n    const maxTranslateNegative = -activeCellOffset.value;\r\n    const maxTranslatePositive =\r\n      scrollViewSize.value - (activeCellOffset.value + activeCellSize.value);\r\n\r\n    // Only constrain the touch position while the finger is on the screen. This allows the active cell\r\n    // to snap above/below the fold once let go, if the drag ends at the top/bottom of the screen.\r\n    const constrainedBase = isTouchActiveNative.value\r\n      ? constrained - activeCellOffset.value\r\n      : touchPositionDiff.value;\r\n\r\n    // Make sure item is constrained to the boundaries of the scrollview\r\n    return Math.min(\r\n      Math.max(constrainedBase, maxTranslateNegative),\r\n      maxTranslatePositive\r\n    );\r\n  }, []);\r\n\r\n  const dragItemOverflow = props.dragItemOverflow;\r\n  const hoverAnim = useDerivedValue(() => {\r\n    if (activeIndexAnim.value < 0) return 0;\r\n    return dragItemOverflow\r\n      ? touchPositionDiff.value\r\n      : touchPositionDiffConstrained.value;\r\n  }, []);\r\n\r\n  const hoverOffset = useDerivedValue(() => {\r\n    return hoverAnim.value + activeCellOffset.value;\r\n  }, [hoverAnim, activeCellOffset]);\r\n\r\n  useDerivedValue(() => {\r\n    // Reset spacer index when we stop hovering\r\n    const isHovering = activeIndexAnim.value >= 0;\r\n    if (!isHovering && spacerIndexAnim.value >= 0) {\r\n      spacerIndexAnim.value = -1;\r\n    }\r\n  }, []);\r\n\r\n  // Note: this could use a refactor as it combines touch state + cell animation\r\n  const resetTouchedCell = useCallback(() => {\r\n    activeCellOffset.value = 0;\r\n    hasMoved.value = 0;\r\n  }, []);\r\n\r\n  const value = useMemo(\r\n    () => ({\r\n      activeCellOffset,\r\n      activeCellSize,\r\n      activeIndexAnim,\r\n      containerSize,\r\n      disabled,\r\n      horizontalAnim,\r\n      hoverAnim,\r\n      hoverOffset,\r\n      isDraggingCell,\r\n      isTouchActiveNative,\r\n      panGestureState,\r\n      placeholderOffset,\r\n      resetTouchedCell,\r\n      scrollOffset,\r\n      scrollViewSize,\r\n      spacerIndexAnim,\r\n      touchPositionDiff,\r\n      touchTranslate,\r\n      autoScrollDistance,\r\n      viewableIndexMin,\r\n      viewableIndexMax,\r\n    }),\r\n    [\r\n      activeCellOffset,\r\n      activeCellSize,\r\n      activeIndexAnim,\r\n      containerSize,\r\n      disabled,\r\n      horizontalAnim,\r\n      hoverAnim,\r\n      hoverOffset,\r\n      isDraggingCell,\r\n      isTouchActiveNative,\r\n      panGestureState,\r\n      placeholderOffset,\r\n      resetTouchedCell,\r\n      scrollOffset,\r\n      scrollViewSize,\r\n      spacerIndexAnim,\r\n      touchPositionDiff,\r\n      touchTranslate,\r\n      autoScrollDistance,\r\n      viewableIndexMin,\r\n      viewableIndexMax,\r\n    ]\r\n  );\r\n\r\n  useEffect(() => {\r\n    props.onAnimValInit?.(value);\r\n  }, [value]);\r\n\r\n  return value;\r\n}\r\n"],"mappings":"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"}